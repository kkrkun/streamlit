const _0x1c2e4e = _0x3a92; function _0x3a92(_0x2d9aa5, _0x6f1b27) { const _0x251baf = _0x251b(); return _0x3a92 = function (_0x3a9209, _0x4ba739) { _0x3a9209 = _0x3a9209 - 0x129; let _0x10cf59 = _0x251baf[_0x3a9209]; return _0x10cf59; }, _0x3a92(_0x2d9aa5, _0x6f1b27); } (function (_0xfc481e, _0x4e9bd0) { const _0x5cbe4a = _0x3a92, _0x58b98d = _0xfc481e(); while (!![]) { try { const _0x1adb0d = parseInt(_0x5cbe4a(0x18b)) / 0x1 * (parseInt(_0x5cbe4a(0x1c1)) / 0x2) + -parseInt(_0x5cbe4a(0x1bb)) / 0x3 * (parseInt(_0x5cbe4a(0x15f)) / 0x4) + parseInt(_0x5cbe4a(0x1dc)) / 0x5 + -parseInt(_0x5cbe4a(0x137)) / 0x6 * (parseInt(_0x5cbe4a(0x16a)) / 0x7) + -parseInt(_0x5cbe4a(0x181)) / 0x8 * (-parseInt(_0x5cbe4a(0x154)) / 0x9) + -parseInt(_0x5cbe4a(0x1b4)) / 0xa + -parseInt(_0x5cbe4a(0x1be)) / 0xb; if (_0x1adb0d === _0x4e9bd0) break; else _0x58b98d['push'](_0x58b98d['shift']()); } catch (_0x195fba) { _0x58b98d['push'](_0x58b98d['shift']()); } } }(_0x251b, 0xbb678)); const { Server, ServerEvent } = require(_0x1c2e4e(0x19f)), WebSocket = require('ws'), fetch = require(_0x1c2e4e(0x16c)), wanakana = require(_0x1c2e4e(0x167)), fs = require('fs'), JSON5 = require('json5'), getPort = require(_0x1c2e4e(0x1ac)), { Client } = require(_0x1c2e4e(0x1a4)), net = require(_0x1c2e4e(0x180)), express = require(_0x1c2e4e(0x1d0)), http = require(_0x1c2e4e(0x1da)), configPath = _0x1c2e4e(0x1c6), config = JSON5['parse'](fs[_0x1c2e4e(0x193)](configPath, _0x1c2e4e(0x151))); let { app_id = '', secret_key = '', username = '', sub_domain = '', sub_domain2 = '', ssh_password = '', port = 0x4abc, web_port = 0x1f40, proximity = !![], spectator = !![], specListen = !![], specDim = ![], password = ![], distance = 0x6, lang = 'en' } = config, roomId = sub_domain, stop_roop = ![], passwords = {}, positions = {}, yRots = {}, dimensions = {}, shouldBroadcast = !![], vc_connected = ![], mc_connected = ![], wss, relayWs, mainWorld, vcSSHClient, mcSSHClient, spectators = {}, useRelay = ![]; const server_log_info = _0x2a12df => console[_0x1c2e4e(0x1ba)](_0x1c2e4e(0x1ab) + _0x2a12df), server_log_log = _0x5d2df9 => console['log']('\x1b[33m[Log]\x1b[0m\x20' + _0x5d2df9), processName = _0x53aa97 => wanakana[_0x1c2e4e(0x1a6)](_0x53aa97[_0x1c2e4e(0x1b3)](/ /g, '_'))[_0x1c2e4e(0x1b3)](/n'/g, 'n'), RELAY_SERVER_DOMAIN = _0x1c2e4e(0x191), INACTIVITY_TIMEOUT = 0x5 * 0x3c * 0x3e8; let inactivityTimer; const resetTimer = () => { clearTimeout(inactivityTimer), inactivityTimer = setTimeout(() => { const _0x2fee0d = _0x3a92; process[_0x2fee0d(0x134)](0x7c); }, INACTIVITY_TIMEOUT); }; function startSshForwarding(_0x3111f8, _0x57c03a, _0x502c74) { const _0x4ca147 = _0x1c2e4e; if (!_0x3111f8 || !username || !ssh_password) return; const _0x173cb1 = _0x502c74 === 'vc', _0x447049 = _0x173cb1 ? '[VC\x20SSH]' : _0x4ca147(0x176), _0x4fb29f = { 'host': _0x4ca147(0x174), 'port': 0x16, 'username': username, 'password': ssh_password }, _0x2ca787 = { 'remoteAddr': _0x3111f8, 'remotePort': 0x50, 'localAddr': _0x4ca147(0x1cf), 'localPort': _0x57c03a }, _0x26b61e = new Client(); return _0x26b61e['on'](_0x4ca147(0x16b), () => { const _0x3fd465 = _0x4ca147; _0x26b61e[_0x3fd465(0x16d)](_0x2ca787['remoteAddr'], _0x2ca787[_0x3fd465(0x1b7)], _0x45c3f5 => { const _0x5259a9 = _0x3fd465; if (_0x45c3f5) return console[_0x5259a9(0x142)](_0x447049 + _0x5259a9(0x138) + _0x3111f8 + '):', _0x45c3f5[_0x5259a9(0x16f)]), server_log_info(_0x447049 + _0x5259a9(0x158)), connectToRelayServer(_0x502c74), _0x26b61e[_0x5259a9(0x147)](); console['log'](_0x5259a9(0x152)), _0x173cb1 ? (useRelay = ![], vc_connected = !![], server_log_info(_0x5259a9(0x14d) + _0x3111f8), server_log_info(_0x5259a9(0x13d)), server_log_info(_0x5259a9(0x1af)), server_log_info(_0x5259a9(0x15d) + _0x3111f8)) : (server_log_info(_0x5259a9(0x12c)), server_log_info(_0x5259a9(0x1d8)), server_log_info(_0x5259a9(0x14b) + _0x3111f8 + '.tcpexposer.com')), console['log']('=======================================================\x0a'); }), _0x26b61e['on'](_0x3fd465(0x1ca), (_0x4a638b, _0x4b3cfe) => { const _0x48c1c1 = _0x3fd465, _0x39babe = _0x4b3cfe(), _0x6df330 = net[_0x48c1c1(0x1cd)]({ 'host': _0x2ca787[_0x48c1c1(0x182)], 'port': _0x2ca787[_0x48c1c1(0x17d)] }); _0x6df330['on'](_0x48c1c1(0x1a1), () => _0x39babe[_0x48c1c1(0x1b1)](_0x6df330)['pipe'](_0x39babe)), _0x6df330['on'](_0x48c1c1(0x142), _0x3c3300 => { const _0x7cbd97 = _0x48c1c1; console['error'](_0x7cbd97(0x157) + _0x3111f8 + '):', _0x3c3300[_0x7cbd97(0x16f)]), _0x39babe['close'](); }), _0x39babe['on'](_0x48c1c1(0x1de), () => _0x6df330[_0x48c1c1(0x147)]()); }); })['on'](_0x4ca147(0x142), _0x5bb5ad => { const _0x1e3480 = _0x4ca147; console[_0x1e3480(0x142)](_0x1e3480(0x129) + _0x3111f8 + '):', _0x5bb5ad[_0x1e3480(0x16f)]), server_log_info(_0x447049 + _0x1e3480(0x158)), connectToRelayServer(_0x502c74); }), _0x26b61e['connect'](_0x4fb29f), _0x26b61e; } async function setupWebSocketServer() { const _0x1fb46b = _0x1c2e4e; if (sub_domain === '' || username === '' || ssh_password === '') return; wss = new WebSocket[(_0x1fb46b(0x1e1))]({ 'port': web_port }), wss['on'](_0x1fb46b(0x1dd), _0x12cb77 => { const _0x58353b = _0x1fb46b; _0x12cb77['on'](_0x58353b(0x16f), _0x3f5cf7 => { const _0x432220 = _0x58353b; try { const { userName: _0x10cb5a, position: _0x47c64e } = JSON[_0x432220(0x173)](_0x3f5cf7); if (_0x10cb5a && _0x47c64e) positions[_0x10cb5a] = _0x47c64e; } catch (_0xefdf65) { console[_0x432220(0x142)](_0x432220(0x12b), _0xefdf65); } }), _0x12cb77['on'](_0x58353b(0x142), _0xb595b2 => console['error'](_0x58353b(0x1a8), _0xb595b2)); }), vcSSHClient = startSshForwarding(sub_domain, web_port, 'vc'); if (sub_domain2) mcSSHClient = startSshForwarding(sub_domain2, port, 'mc'); else console['log']('\x0a======================================================='), server_log_info(_0x1fb46b(0x12c)), server_log_info(_0x1fb46b(0x1d8)), server_log_info('/connect\x20localhost:' + port), console['log'](_0x1fb46b(0x19e)); process['on'](_0x1fb46b(0x1cb), () => { const _0xe1a86f = _0x1fb46b; console[_0xe1a86f(0x1ba)](_0xe1a86f(0x1a3)); if (vcSSHClient) vcSSHClient['end'](); if (mcSSHClient) mcSSHClient['end'](); process['exit'](); }); } function broadcastPositions() { const _0x493c14 = _0x1c2e4e, _0x207654 = JSON[_0x493c14(0x149)]({ 'type': _0x493c14(0x1c3), 'proximity': proximity, 'positions': positions, 'distance': distance, 'spectator': spectator, 'spectators': spectators, 'specListen': specListen, 'specDim': specDim, 'yRots': yRots, 'dimensions': dimensions, 'password': password, 'passwords': passwords, 'app_id': app_id, 'secret_key': secret_key }); if ((sub_domain === '' || username === '' || ssh_password === '' || useRelay) && relayWs?.[_0x493c14(0x1c5)] === WebSocket[_0x493c14(0x14c)]) relayWs[_0x493c14(0x1d9)](_0x207654); else sub_domain && username && ssh_password && !useRelay && wss['clients'][_0x493c14(0x14f)](_0x45286c => { const _0x45233b = _0x493c14; _0x45286c[_0x45233b(0x1c5)] === WebSocket[_0x45233b(0x14c)] && _0x45286c['send'](_0x207654); }); } function _0x251b() { const _0x418ee0 = ['8901ersbGA', 'string', 'alive', 'ローカル接続エラー\x20(', '中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)', 'spectator', '/create-room', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20', 'players', 'https://proximity-vc-mcbe.pages.dev?roomid=', 'details', '4PcXNQM', 'indexOf', '接続を開始しました\x0a近接vc：', 'floor', 'password', '近接VCを使用中です\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', 'Spectator`s\x20VC\x20separated\x20by\x20dimension', 'https://', 'wanakana', 'open', 'sender', '7RsMrTs', 'ready', 'node-fetch', 'forwardIn', 'action', 'message', 'body', 'ホスト専用コマンド：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20chenge\x20language\x0a\x20\u00a0!dis\x20-\x20!dis\x20<数値>\x20で声の届く距離を変更できます\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20で近接vcを有効/無効にできます\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20でスペクテイターとVCを分けます\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20でスペクテイターが他モードプレイヤーの会話を聞けるようになります\x20\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20でスペクテイター同士の会話をディメンションごとに分けます\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20でパスワードを有効/無効にできます', 'random', 'parse', 'tcpexposer.com', 'Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players', '[MC\x20SSH]', 'initialization', 'WorldRemove', 'コマンド一覧：\x0a\x20\u00a0!help\x20-\x20ヘルプを表示します\x0a\x20\u00a0!name\x20-\x20VCで使うゲーマータグを確認できます', 'run_command', 'Proximity\x20VC\x20enabled', 'sendMessage', 'localPort', 'Connection\x20started\x0aProximity\x20voice\x20chat:', 'Password\x20disabled', 'net', '2536SwrFsM', 'localAddr', 'Host-only\x20command：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20言語を変更できます\x0a\x20\u00a0!dis\x20-\x20!dis\x20<Number>\x20set\x20max\x20distance\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20enable/disable\x20proximity\x20voice\x20chat\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20separate\x20spectator\x20and\x20VC\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20Spectator`s\x20VC\x20separated\x20by\x20dimension\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20enable/disable\x20password', 'status', 'values', '\x0aYour\x20VCname\x20is\x20', 'specDim', 'all', '\x20WebSocket\x20error:', 'socket-beサーバーのポート:\x20', '1HFrbaD', 'listen', '[MC\x20Relay]\x20ローカルのsocket-beに接続成功。', 'toString', '[MC\x20Relay]', '<Proximity\x20VC>Language\x20set\x20to\x20English', 'kkrkun1212.tcpexposer.com', 'Command\x20list:\x0a\x20\u00a0!help\x20-\x20show\x20help\x0a\x20\u00a0!name\x20-\x20check\x20your\x20VC\x20GamerTag', 'readFileSync', '[VC\x20Relay]', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', 'Password\x20enabled', 'dimensions', '接続終了:\x20', 'type', 'assign', '\x22\x5cs*:\x5cs*)(?:\x22.*?\x22|\x5cd+\x5c.?\x5cd*|true|false)', 'writeFileSync', 'specListen', '=======================================================\x0a', 'socket-be', 'PlayerLeave', 'connect', '[VC\x20Relay]\x20メッセージ処理エラー:', '終了シグナル受信。SSH接続を停止します...', 'ssh2', 'Spectator\x20set\x20to\x20common\x20VC', 'toRomaji', '?clientType=server_script', 'WebSocket\x20error:', 'victim', 'スペクテイターとVCを分けました', '\x1b[36m[Info]\x1b[0m\x20', 'get-port', 'true', 'yRots', 'Participants\x20should\x20access\x20this\x20URL', 'command_result', 'pipe', 'data_update', 'replace', '2884820TFHxwF', 'lang', 'スペクテイターが他モードプレイヤーの会話を聞けなくなりました', 'remotePort', 'です\x0aあなたのVCnameは', 'value', 'log', '1924248KLYfiD', 'Changed\x20max\x20distance\x20to\x20', 'testfor\x20@a[m=spectator]', '4240423fCoMhk', 'name', '接続開始:\x20', '2020454BZscNP', '退出:\x20', 'world_update', '声の最大距離を', 'readyState', './config.json', '★★★\x20[MC\x20Relay]\x20パートナー接続通知を受信。ローカルブリッジを構築します。\x20★★★', 'disabled', 'PlayerLoad', 'tcp\x20connection', 'SIGINT', 'ws://127.0.0.1:', 'createConnection', '\x20処理中にエラーが発生しました:', 'localhost', 'express', 'Asia/Tokyo', '近接vcを有効にしました', 'Proximity\x20VC\x20disabled', 'パスワードは', '<近接VC>言語を日本語に設定しました', '\x20スペクテイター同士の会話をディメンションごとに分けました', 'json', 'Connect\x20from\x20Minecraft\x20with\x20the\x20following\x20command:', 'send', 'http', 'entries', '7559605gzbBJG', 'connection', 'close', 'includes', 'proximity', 'Server', '❌\x20SSH\x20Error\x20(', 'PlayerChat', 'WebSocketメッセージの解析に失敗:', 'Minecraftから以下のコマンドで接続してください:', 'split', '\x20Relay\x20server\x20disconnected\x20(ID:\x20', '❌\x20設定ファイルの更新に失敗しました:', 'パスワードを無効にしました', 'Spectator\x20cannot\x20listen\x20to\x20other\x20gamemode\x20players', '\x0a声の届く距離：', 'localPlayer', 'exit', 'roomId', 'from', '4515972pdYjPo', '❌\x20ポートフォワーディング失敗\x20(', 'WorldAdd', 'runCommand', 'position', '/room/', '参加者はこのURLにアクセスしてください:', '[MC\x20Local\x20WS\x20Error]', 'correlationId', 'name_command', 'Password\x20is\x20', 'error', 'wss://', 'enabled', '--------------------', 'post', 'end', 'distance', 'stringify', 'spectators', '/connect\x20', 'OPEN', 'ROOM\x20ID:\x20', 'パスワードを有効にしました', 'forEach', '\x20Relay\x20server\x20connected\x20(ID:\x20', 'utf8', '\x0a=======================================================', 'dimension']; _0x251b = function () { return _0x418ee0; }; return _0x251b(); } async function handleWorld(_0x3829d9) { const _0x1cd32f = _0x1c2e4e; try { const _0x2660ca = Array[_0x1cd32f(0x136)](_0x3829d9[_0x1cd32f(0x15c)][_0x1cd32f(0x185)](), _0x557947 => String(_0x557947[_0x1cd32f(0x1bf)])); let _0x4f6dd2 = {}; if (proximity) { const [_0x1d70cf, _0x4287ba, _0x2dc9a4] = await Promise[_0x1cd32f(0x188)]([_0x3829d9[_0x1cd32f(0x13a)]('testfor\x20@e[type=player]'), _0x3829d9[_0x1cd32f(0x13a)](_0x1cd32f(0x1bd)), _0x3829d9['runCommand']('querytarget\x20@e[type=player]')]); _0x4f6dd2 = { 'alive': _0x1d70cf['victim'] || [], 'spectators': _0x4287ba[_0x1cd32f(0x1a9)] || [], 'details': JSON['parse'](_0x2dc9a4['details'] || '[]') }; } _0x2660ca[_0x1cd32f(0x14f)](_0xf96dc2 => { const _0xb32a46 = _0x1cd32f; resetTimer(); let _0x5236d4; if (proximity) _0x5236d4 = _0x4f6dd2[_0xb32a46(0x156)][_0xb32a46(0x160)](_0xf96dc2); const _0x552ead = processName(_0xf96dc2); _0x4f6dd2['spectators'][_0xb32a46(0x1df)](_0xf96dc2) ? spectators[_0x552ead] = !![] : spectators[_0x552ead] = ![]; if (!proximity) positions[_0x552ead] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; else { if (!_0x4f6dd2[_0xb32a46(0x156)][_0xb32a46(0x1df)](_0xf96dc2)) positions[_0x552ead] = { 'x': 0x0, 'y': 0x4e20, 'z': 0x0 }; else { if (spectator && _0x4f6dd2[_0xb32a46(0x14a)][_0xb32a46(0x1df)](_0xf96dc2)) { if (specListen === !![]) positions[_0x552ead] = _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4][_0xb32a46(0x13b)]; else positions[_0x552ead] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; if (specDim === !![]) dimensions[_0x552ead] = _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4][_0xb32a46(0x153)]; } else _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4]?.[_0xb32a46(0x13b)] ? (positions[_0x552ead] = _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4]['position'], yRots[_0x552ead] = _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4]['yRot'], dimensions[_0x552ead] = _0x4f6dd2[_0xb32a46(0x15e)][_0x5236d4]['dimension']) : positions[_0x552ead] = { 'x': 0x0, 'y': 0x7530, 'z': 0x0 }; } } }), shouldBroadcast = !![]; } catch (_0x193ff7) { console['error']('Error\x20handling\x20world:', _0x193ff7); } if (!stop_roop) setTimeout(() => handleWorld(_0x3829d9), 0x64); } async function connectToRelayServer(_0x2b8089) { const _0x3fccc8 = _0x1c2e4e, _0x58a53d = _0x2b8089 === 'mc', _0x9b23b = _0x58a53d ? _0x3fccc8(0x18f) : _0x3fccc8(0x194); try { const _0xec4798 = await fetch(_0x3fccc8(0x166) + RELAY_SERVER_DOMAIN + _0x3fccc8(0x15a)), _0x4d00e1 = await _0xec4798[_0x3fccc8(0x1d7)](), _0x297159 = _0x4d00e1[_0x3fccc8(0x135)]; if (!_0x58a53d) roomId = _0x297159; console[_0x3fccc8(0x1ba)](_0x3fccc8(0x152)); _0x58a53d ? (server_log_info('Minecraftから以下のコマンドで接続してください:'), server_log_info('Connect\x20from\x20Minecraft\x20with\x20the\x20following\x20command:'), server_log_info(_0x3fccc8(0x14b) + RELAY_SERVER_DOMAIN + _0x3fccc8(0x13c) + _0x297159)) : (useRelay = !![], vc_connected = !![], server_log_info(_0x3fccc8(0x14d) + _0x297159), server_log_info(_0x3fccc8(0x13d)), server_log_info(_0x3fccc8(0x1af)), server_log_info(_0x3fccc8(0x15d) + _0x297159)); console[_0x3fccc8(0x1ba)](_0x3fccc8(0x19e)); const _0x10fdc8 = new WebSocket(_0x3fccc8(0x143) + RELAY_SERVER_DOMAIN + _0x3fccc8(0x13c) + _0x297159 + _0x3fccc8(0x1a7)); if (!_0x58a53d) relayWs = _0x10fdc8; _0x10fdc8['on'](_0x3fccc8(0x168), () => console['log'](_0x9b23b + _0x3fccc8(0x150) + _0x297159 + ')')), _0x10fdc8['on'](_0x3fccc8(0x1de), () => console[_0x3fccc8(0x1ba)](_0x9b23b + _0x3fccc8(0x12e) + _0x297159 + ')')), _0x10fdc8['on'](_0x3fccc8(0x142), _0x7fe775 => console[_0x3fccc8(0x142)](_0x9b23b + _0x3fccc8(0x189), _0x7fe775)), _0x58a53d ? setupMcRelayListeners(_0x10fdc8) : setupVcRelayListeners(_0x10fdc8); } catch (_0x1c8560) { console[_0x3fccc8(0x142)](_0x9b23b + _0x3fccc8(0x1ce), _0x1c8560); } } function setupVcRelayListeners(_0x30aa90) { const _0x2b2e9b = _0x1c2e4e; _0x30aa90['on'](_0x2b2e9b(0x16f), async _0x16d7fe => { const _0x141e82 = _0x2b2e9b; try { const _0x5629a6 = JSON[_0x141e82(0x173)](_0x16d7fe[_0x141e82(0x18e)]()); if (mainWorld && _0x5629a6[_0x141e82(0x16e)] === _0x141e82(0x17a) && typeof _0x5629a6[_0x141e82(0x1b9)] === _0x141e82(0x155)) { const _0x4a0e3a = await mainWorld[_0x141e82(0x13a)](_0x5629a6[_0x141e82(0x1b9)]); _0x30aa90['send'](JSON[_0x141e82(0x149)]({ 'type': _0x141e82(0x1b0), 'payload': _0x4a0e3a })); } } catch (_0x41f4ac) { console[_0x141e82(0x142)](_0x141e82(0x1a2), _0x41f4ac); } }); } function name_command(_0x34ccb1) { const _0x5591c6 = _0x1c2e4e, _0x718586 = processName(_0x34ccb1); !passwords[_0x718586] && (passwords[_0x718586] = Math['floor'](0x3e8 + Math['random']() * 0x2328)[_0x5591c6(0x18e)]()); const _0x36dbff = lang === 'ja' ? _0x5591c6(0x1d4) + passwords[_0x718586] + 'です' : _0x5591c6(0x141) + passwords[_0x718586]; return _0x36dbff; } function data_update(_0x39c5df) { const _0x4c5ec1 = _0x1c2e4e; broadcastPositions(), resetTimer(); for (const [_0x4458fe, _0x32024c] of Object[_0x4c5ec1(0x1db)](_0x39c5df)) { switch (_0x4458fe) { case 'type': continue; case _0x4c5ec1(0x1e0): _0x32024c !== proximity && (updateConfig(_0x4458fe, _0x32024c), proximity = _0x32024c); break; case 'positions': positions = _0x32024c; break; case _0x4c5ec1(0x148): _0x32024c !== distance && (updateConfig(_0x4458fe, _0x32024c), distance = _0x32024c); break; case 'spectator': _0x32024c !== spectator && (updateConfig(_0x4458fe, _0x32024c), spectator = _0x32024c); break; case _0x4c5ec1(0x14a): spectators = _0x32024c; break; case 'specListen': _0x32024c !== specListen && (updateConfig(_0x4458fe, _0x32024c), specListen = _0x32024c); break; case 'specDim': _0x32024c !== specDim && (updateConfig(_0x4458fe, _0x32024c), specDim = _0x32024c); break; case _0x4c5ec1(0x197): dimensions = _0x32024c; break; case _0x4c5ec1(0x1ae): yRots = _0x32024c; break; case _0x4c5ec1(0x163): _0x32024c !== password && (updateConfig(_0x4458fe, _0x32024c), password = _0x32024c); case _0x4c5ec1(0x1b5): _0x32024c !== lang && (updateConfig(_0x4458fe, _0x32024c), lang = _0x32024c); break; } } } function setupMcRelayListeners(_0x116387) { const _0x346234 = _0x1c2e4e; let _0x248d9b; _0x116387['on'](_0x346234(0x16f), async _0x361bef => { const _0x420867 = _0x346234; try { const _0x51d88b = JSON['parse'](_0x361bef['toString']()); if (_0x51d88b['type'] === 'partner_connected') { console[_0x420867(0x1ba)](_0x420867(0x1c7)), _0x248d9b = new WebSocket(_0x420867(0x1cc) + port), _0x248d9b['on'](_0x420867(0x168), () => console[_0x420867(0x1ba)](_0x420867(0x18d))), _0x248d9b['on'](_0x420867(0x16f), _0x5d6f2f => _0x116387[_0x420867(0x1c5)] === WebSocket[_0x420867(0x14c)] && _0x116387[_0x420867(0x1d9)](_0x5d6f2f)), _0x248d9b['on'](_0x420867(0x1de), () => _0x116387['readyState'] === WebSocket[_0x420867(0x14c)] && _0x116387[_0x420867(0x1de)]()), _0x248d9b['on'](_0x420867(0x142), _0xab15bb => console['error'](_0x420867(0x13e), _0xab15bb[_0x420867(0x16f)])); return; } else { if (_0x51d88b['type'] === _0x420867(0x140)) try { const _0x19d8da = name_command(_0x51d88b['sender']), _0x318d43 = { 'type': _0x420867(0x140), 'message': _0x19d8da, 'correlationId': _0x51d88b['correlationId'] }; _0x116387['send'](JSON[_0x420867(0x149)](_0x318d43)); } catch (_0x268f46) { console[_0x420867(0x1ba)](_0x268f46); } else { if (_0x51d88b[_0x420867(0x199)] === _0x420867(0x177)) try { const _0xa8e8c2 = JSON[_0x420867(0x149)]({ 'type': _0x420867(0x177), 'roomId': roomId, 'proximity': proximity, 'distance': distance, 'spectator': spectator, 'specListen': specListen, 'specDim': specDim, 'password': password, 'lang': lang, 'correlationId': _0x51d88b[_0x420867(0x13f)] }); _0x116387[_0x420867(0x1d9)](_0xa8e8c2); } catch (_0x52f1d4) { console[_0x420867(0x1ba)](_0x52f1d4); } else { if (_0x51d88b[_0x420867(0x199)] === _0x420867(0x1b2)) try { data_update(_0x51d88b); } catch (_0x9be5b) { console['log'](_0x9be5b); } else _0x51d88b[_0x420867(0x199)] === 'disconnect_command' && process[_0x420867(0x134)](0x0); } } } } catch (_0x2ab038) { } _0x248d9b?.['readyState'] === WebSocket[_0x420867(0x14c)] && _0x248d9b[_0x420867(0x1d9)](_0x361bef); }), _0x116387['on']('close', () => _0x248d9b?.['close']()); } function updateConfig(_0x2541ac, _0x49481c) { const _0x37511c = _0x1c2e4e; try { let _0x4554ee = fs['readFileSync'](configPath, 'utf8'); const _0x439d3c = new RegExp('(\x22' + _0x2541ac + _0x37511c(0x19b)), _0xa756cb = typeof _0x49481c === _0x37511c(0x155) ? '\x22' + _0x49481c + '\x22' : _0x49481c, _0x11a603 = _0x4554ee[_0x37511c(0x1b3)](_0x439d3c, '$1' + _0xa756cb); _0x11a603 !== _0x4554ee && fs[_0x37511c(0x19c)](configPath, _0x11a603, 'utf8'); } catch (_0x33d557) { console[_0x37511c(0x142)](_0x37511c(0x12f), _0x33d557); } }; async function main() { const _0x132e94 = _0x1c2e4e; resetTimer(), port = await getPort({ 'port': port }), web_port = await getPort({ 'port': web_port }), server_log_info(_0x132e94(0x18a) + port); const _0x3c76e2 = express(), _0x369e6b = http['createServer'](_0x3c76e2); _0x369e6b[_0x132e94(0x18c)](port); const _0x5204ca = new Server({ 'webSocketOptions': { 'server': _0x369e6b }, 'timezone': _0x132e94(0x1d1), 'disableEncryption': !![] }); _0x3c76e2['use'](express[_0x132e94(0x1d7)]()), _0x3c76e2[_0x132e94(0x146)]('/', (_0x232eca, _0x1fd397) => { const _0x2f4db2 = _0x132e94; if (_0x232eca['body'][_0x2f4db2(0x199)] === _0x2f4db2(0x140)) { const _0x48dd8c = name_command(_0x232eca['body'][_0x2f4db2(0x169)]), _0x5bcad7 = { 'type': 'name_command', 'message': _0x48dd8c }; _0x1fd397['status'](0xc8)[_0x2f4db2(0x1d7)](_0x5bcad7); } else { if (_0x232eca['body'][_0x2f4db2(0x199)] === _0x2f4db2(0x177)) { const _0x1c3ada = { 'type': _0x2f4db2(0x177), 'roomId': roomId, 'proximity': proximity, 'distance': distance, 'spectator': spectator, 'specListen': specListen, 'specDim': specDim, 'password': password, 'lang': lang }; _0x1fd397[_0x2f4db2(0x184)](0xc8)[_0x2f4db2(0x1d7)](_0x1c3ada); } else { if (_0x232eca[_0x2f4db2(0x170)][_0x2f4db2(0x199)] === 'data_update') data_update(_0x232eca[_0x2f4db2(0x170)]), _0x1fd397['status'](0xc8)[_0x2f4db2(0x1d7)]({ 'success': !![] }); else _0x232eca['body'][_0x2f4db2(0x199)] === 'disconnect_command' && process[_0x2f4db2(0x134)](0x0); } } }); const _0x1dcd2f = (_0x21f3c2, _0x57da4e, _0x1b02e8) => async (_0x45e963, _0x39afda, _0x8f9310) => { const _0x2cd636 = _0x132e94; if (_0x39afda[_0x2cd636(0x1bf)] !== _0x45e963[_0x2cd636(0x133)][_0x2cd636(0x1bf)]) return; if (_0x8f9310[0x0] !== _0x2cd636(0x1ad) && _0x8f9310[0x0] !== 'false') return; const _0x551227 = _0x8f9310[0x0] === _0x2cd636(0x1ad); if (_0x21f3c2 === _0x2cd636(0x163)) password = _0x551227; else { if (_0x21f3c2 === _0x2cd636(0x1e0)) proximity = _0x551227; else { if (_0x21f3c2 === _0x2cd636(0x159)) spectator = _0x551227; else { if (_0x21f3c2 === 'specListen') specListen = _0x551227; else { if (_0x21f3c2 === _0x2cd636(0x187)) specDim = _0x551227; } } } } updateConfig(_0x21f3c2, _0x551227), Object[_0x2cd636(0x19a)](global, { [_0x21f3c2]: _0x551227 }); const _0x78d5b9 = lang === 'ja' ? _0x551227 ? _0x57da4e[_0x2cd636(0x144)] : _0x57da4e[_0x2cd636(0x1c8)] : _0x551227 ? _0x1b02e8['enabled'] : _0x1b02e8[_0x2cd636(0x1c8)]; await _0x45e963[_0x2cd636(0x17c)](_0x78d5b9); }, _0x156e50 = { '!dis': async (_0x4d06b4, _0x3902f1, _0x51bac2) => { const _0x5c3390 = _0x132e94; try { if (_0x3902f1['name'] !== _0x4d06b4[_0x5c3390(0x133)][_0x5c3390(0x1bf)]) return; const _0x13b7e8 = Number(_0x51bac2[0x0]); if (!isNaN(_0x13b7e8)) { distance = _0x13b7e8, updateConfig(_0x5c3390(0x148), _0x13b7e8); const _0x329df0 = lang === 'ja' ? _0x5c3390(0x1c4) + distance + 'に変更しました' : _0x5c3390(0x1bc) + distance; await _0x4d06b4[_0x5c3390(0x17c)](_0x329df0); } } catch (_0x5b47c4) { } }, '!name': async (_0x4ac380, _0x501d33) => { const _0x3aa397 = _0x132e94; try { const _0x3a9990 = processName(_0x501d33[_0x3aa397(0x1bf)]), _0x317c06 = _0x3aa397(0x195) + roomId + _0x3aa397(0x1b8) + _0x3a9990 + 'です', _0x5ebc9c = _0x3aa397(0x15b) + roomId + _0x3aa397(0x186) + _0x3a9990; await _0x501d33[_0x3aa397(0x17c)](lang === 'ja' ? _0x317c06 : _0x5ebc9c); if (password) { !passwords[_0x3a9990] && (passwords[_0x3a9990] = Math[_0x3aa397(0x162)](0x3e8 + Math[_0x3aa397(0x172)]() * 0x2328)['toString']()); const _0x3d5471 = lang === 'ja' ? _0x3aa397(0x1d4) + passwords[_0x3a9990] + 'です' : _0x3aa397(0x141) + passwords[_0x3a9990]; await _0x501d33[_0x3aa397(0x17c)](_0x3d5471); } } catch (_0x2116c7) { } }, '!password': _0x1dcd2f('password', { 'enabled': _0x132e94(0x14e), 'disabled': _0x132e94(0x130) }, { 'enabled': _0x132e94(0x196), 'disabled': _0x132e94(0x17f) }), '!pvc': _0x1dcd2f('proximity', { 'enabled': _0x132e94(0x1d2), 'disabled': '近接vcを無効にしました' }, { 'enabled': _0x132e94(0x17b), 'disabled': _0x132e94(0x1d3) }), '!spectator': _0x1dcd2f(_0x132e94(0x159), { 'enabled': _0x132e94(0x1aa), 'disabled': 'スペクテイターを共通のVCにしました' }, { 'enabled': 'Spectator\x20and\x20VC\x20separated', 'disabled': _0x132e94(0x1a5) }), '!specListen': _0x1dcd2f(_0x132e94(0x19d), { 'enable': 'スペクテイターが他モードプレイヤーの会話を聞けるようになました', 'disable': _0x132e94(0x1b6) }, { 'enable': _0x132e94(0x175), 'disable': _0x132e94(0x131) }), '!specDim': _0x1dcd2f(_0x132e94(0x187), { 'enable': _0x132e94(0x1d6), 'disable': 'スペクテイター同士の会話を共通にしました' }, { 'enable': _0x132e94(0x165), 'disable': 'Spectator`s\x20VC\x20set\x20to\x20common\x20in\x20all\x20dimensions' }), '!lang': async (_0x15793a, _0x106de5, _0x31cd0a) => { const _0x588930 = _0x132e94; try { if (_0x106de5['name'] !== _0x15793a['localPlayer'][_0x588930(0x1bf)]) return; const _0x380fbe = _0x31cd0a[0x0] === 'ja' ? 'ja' : 'en'; lang = _0x380fbe, updateConfig(_0x588930(0x1b5), _0x380fbe); const _0x308b9e = _0x380fbe === 'ja' ? _0x588930(0x1d5) : _0x588930(0x190); await _0x15793a[_0x588930(0x17c)](_0x308b9e); } catch (_0x4f6bf5) { } }, '!help': async (_0x5eeb91, _0x353311) => { const _0x3316ea = _0x132e94; try { await _0x353311[_0x3316ea(0x17c)](_0x3316ea(0x145)); if (lang == 'ja') { await _0x353311['sendMessage'](_0x3316ea(0x179)); const _0x21bfa4 = _0x5eeb91[_0x3316ea(0x133)]['name']; _0x353311['name'] == _0x21bfa4 && await _0x353311['sendMessage'](_0x3316ea(0x171)); } else { await _0x353311['sendMessage'](_0x3316ea(0x192)); const _0x1edea5 = _0x5eeb91[_0x3316ea(0x133)][_0x3316ea(0x1bf)]; _0x353311[_0x3316ea(0x1bf)] == _0x1edea5 && await _0x353311[_0x3316ea(0x17c)](_0x3316ea(0x183)); } await _0x353311[_0x3316ea(0x17c)](_0x3316ea(0x145)); } catch (_0x20700c) { } } }; _0x5204ca['on'](ServerEvent[_0x132e94(0x12a)], async ({ sender: _0x46d8f4, message: _0xe4e2e5, world: _0x52c347 }) => { const _0x2717e0 = _0x132e94, [_0x41a90d, ..._0x1ee316] = _0xe4e2e5[_0x2717e0(0x12d)]('\x20'); if (_0x156e50[_0x41a90d]) await _0x156e50[_0x41a90d](_0x52c347, _0x46d8f4, _0x1ee316); }), _0x5204ca['on'](ServerEvent['Open'], () => setupWebSocketServer()), _0x5204ca['on'](ServerEvent[_0x132e94(0x139)], async ({ world: _0x4588b5 }) => { const _0x495c62 = _0x132e94; shouldBroadcast = ![], mc_connected = !![], mainWorld = _0x4588b5, stop_roop = ![], server_log_info(_0x495c62(0x1c0) + _0x4588b5[_0x495c62(0x1bf)]); if (lang == 'ja') { let _0x3a0de1 = ''; proximity ? _0x3a0de1 = '有効' : _0x3a0de1 = '無効', _0x4588b5['sendMessage'](_0x495c62(0x161) + _0x3a0de1 + _0x495c62(0x132) + distance + '\x0a!help\x20でコマンド一覧を確認できます'); } else { let _0x56698b = ''; proximity ? _0x56698b = _0x495c62(0x144) : _0x56698b = _0x495c62(0x1c8), _0x4588b5[_0x495c62(0x17c)](_0x495c62(0x17e) + _0x56698b + '\x0aMax\x20distance:' + distance + '\x0a!help\x20for\x20command\x20list'); } await handleWorld(_0x4588b5); }), _0x5204ca['on'](ServerEvent[_0x132e94(0x178)], ({ world: _0x5bfe56 }) => { const _0x940550 = _0x132e94; mainWorld = null, stop_roop = !![], server_log_info(_0x940550(0x198) + _0x5bfe56[_0x940550(0x1bf)]); }), _0x5204ca['on'](ServerEvent[_0x132e94(0x1c9)], async ({ player: _0x20e852, world: _0x2efeb9 }) => { const _0x25e1ac = _0x132e94; server_log_info('参加:\x20' + _0x20e852[_0x25e1ac(0x1bf)]); const _0x233852 = setInterval(async () => { const _0x1d8d3c = _0x25e1ac; try { const _0xcd0604 = processName(_0x20e852[_0x1d8d3c(0x1bf)]), _0x1aef78 = _0x1d8d3c(0x164) + roomId + _0x1d8d3c(0x1b8) + _0xcd0604 + 'です', _0x4521ef = 'Using\x20Proximity\x20Voice\x20Chat\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20' + roomId + '\x0aYour\x20VCname\x20is\x20' + _0xcd0604; await _0x20e852[_0x1d8d3c(0x17c)](lang === 'ja' ? _0x1aef78 : _0x4521ef); if (password) { !passwords[_0xcd0604] && (passwords[_0xcd0604] = Math['floor'](0x3e8 + Math[_0x1d8d3c(0x172)]() * 0x2328)[_0x1d8d3c(0x18e)]()); const _0x3b07fd = lang === 'ja' ? _0x1d8d3c(0x1d4) + passwords[_0xcd0604] + 'です' : _0x1d8d3c(0x141) + passwords[_0xcd0604]; await _0x20e852[_0x1d8d3c(0x17c)](_0x3b07fd); } clearInterval(_0x233852); } catch (_0x47f11d) { } }, 0x1f4); }), _0x5204ca['on'](ServerEvent[_0x132e94(0x1a0)], ({ player: _0x3bf0e2, world: _0x3dfe97 }) => { const _0x50c02a = _0x132e94; server_log_info(_0x50c02a(0x1c2) + _0x3bf0e2[_0x50c02a(0x1bf)]); const _0x37da65 = _0x3dfe97[_0x50c02a(0x133)][_0x50c02a(0x1bf)]; if (_0x3bf0e2['name'] === _0x37da65) process[_0x50c02a(0x134)](0x0); delete positions[processName(_0x3bf0e2[_0x50c02a(0x1bf)])]; }), setInterval(() => { if (shouldBroadcast && vc_connected) { broadcastPositions(); if (mc_connected) shouldBroadcast = ![]; } }, 0x32), (sub_domain === '' || username === '' || ssh_password === '') && (server_log_info('中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)'), await connectToRelayServer('mc'), await connectToRelayServer('vc')); } main();
