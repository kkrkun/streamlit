const _0x3272a8 = _0x3429; (function (_0x589ff5, _0x2d47e9) { const _0x333635 = _0x3429, _0x1baf96 = _0x589ff5(); while (!![]) { try { const _0x545da8 = parseInt(_0x333635(0x101)) / 0x1 + parseInt(_0x333635(0x13c)) / 0x2 + -parseInt(_0x333635(0x11f)) / 0x3 + parseInt(_0x333635(0xfd)) / 0x4 * (-parseInt(_0x333635(0x122)) / 0x5) + parseInt(_0x333635(0x108)) / 0x6 + -parseInt(_0x333635(0x110)) / 0x7 * (parseInt(_0x333635(0x14b)) / 0x8) + parseInt(_0x333635(0x137)) / 0x9 * (parseInt(_0x333635(0xee)) / 0xa); if (_0x545da8 === _0x2d47e9) break; else _0x1baf96['push'](_0x1baf96['shift']()); } catch (_0x316dbc) { _0x1baf96['push'](_0x1baf96['shift']()); } } }(_0x21be, 0x22ea2)); function _0x21be() { const _0xf07408 = ['です\x0aあなたのVCnameは', '[MC\x20Relay]\x20ローカルのsocket-beに接続成功。', 'wanakana', 'send', '接続を開始しました\x0a近接vc：', '参加:\x20', '\x0aMax\x20distance:', 'Connect\x20from\x20Minecraft\x20with\x20the\x20following\x20command:', 'get-port', 'Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players', 'readyState', '8408BRQXBi', 'PlayerLoad', '声の最大距離を', '\x1b[36m[Info]\x1b[0m\x20', '153986WvqNeH', 'に変更しました', 'action', '\x0a=======================================================', 'toString', 'values', 'Spectator`s\x20VC\x20separated\x20by\x20dimension', '1704888mvcRTd', '参加者はこのURLにアクセスしてください:', 'socket-beサーバーのポート:\x20', 'false', 'Connection\x20started\x0aProximity\x20voice\x20chat:', 'specListen', 'includes', 'alive', '22064EdAQFl', 'localPlayer', 'querytarget\x20@e[type=player]', 'spectator', 'localhost', 'writeFileSync', '中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)', 'password', '?clientType=server_script', 'name', 'パスワードは', 'details', 'parse', 'localAddr', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20', '819303uNBpFp', 'clients', '\x20スペクテイター同士の会話をディメンションごとに分けました', '185udQyrL', 'exit', '❌\x20設定ファイルの更新に失敗しました:', 'Open', '\x0aYour\x20VCname\x20is\x20', 'WorldAdd', 'players', 'localPort', 'json', '=======================================================\x0a', 'Changed\x20max\x20distance\x20to\x20', '\x20処理中にエラーが発生しました:', 'stringify', 'string', 'enabled', 'testfor\x20@e[type=player]', 'victim', 'パスワードを有効にしました', '<Proximity\x20VC>Language\x20set\x20to\x20English', 'error', 'Spectator`s\x20VC\x20set\x20to\x20common\x20in\x20all\x20dimensions', '501057VYcSLA', 'true', 'OPEN', 'スペクテイターが他モードプレイヤーの会話を聞けなくなりました', 'pipe', '6534HsOmzZ', 'tcp\x20connection', '\x0a!help\x20for\x20command\x20list', 'Minecraftから以下のコマンドで接続してください:', 'WorldRemove', 'Participants\x20should\x20access\x20this\x20URL', 'message', '--------------------', 'パスワードを無効にしました', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', 'random', 'mcproxvc.tcpexposer.com', 'PlayerLeave', 'json5', '❌\x20SSH\x20Error\x20(', '432SudvPL', 'lang', '接続開始:\x20', 'yRot', 'PlayerChat', '\x1b[33m[Log]\x1b[0m\x20', 'command_result', '近接VCを使用中です\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', '\x22\x5cs*:\x5cs*)(?:\x22.*?\x22|\x5cd+\x5c.?\x5cd*|true|false)', '[VC\x20Relay]', '\x0a!help\x20でコマンド一覧を確認できます', 'position', 'type', '\x0a声の届く距離：', 'proximity', 'スペクテイターとVCを分けました', 'forEach', '/create-room', 'スペクテイター同士の会話を共通にしました', 'Proximity\x20VC\x20enabled', 'assign', 'distance', 'utf8', 'スペクテイターを共通のVCにしました', 'testfor\x20@a[m=spectator]', 'runCommand', 'end', 'readFileSync', 'floor', 'ws://127.0.0.1:', 'Server', 'socket-be', '❌\x20ポートフォワーディング失敗\x20(', 'Spectator\x20and\x20VC\x20separated', 'createConnection', 'world_update', 'Asia/Tokyo', '\x20WebSocket\x20error:', 'https://proximity-vc-mcbe.pages.dev?roomid=', 'Password\x20is\x20', 'ROOM\x20ID:\x20', 'disabled', '接続終了:\x20', 'Error\x20handling\x20world:', 'Command\x20list:\x0a\x20\u00a0!help\x20-\x20show\x20help\x0a\x20\u00a0!name\x20-\x20check\x20your\x20VC\x20name', 'open', 'spectators', '<近接VC>言語を日本語に設定しました', 'indexOf', 'wss://', 'log', 'value', '[MC\x20Relay]', '[VC\x20SSH]', 'replace', 'Spectator\x20cannot\x20listen\x20to\x20other\x20gamemode\x20players', '/room/', 'split', 'connect', 'partner_connected', 'all', 'from', 'スペクテイターが他モードプレイヤーの会話を聞けるようになました', 'connection', '/connect\x20localhost:', 'close', 'WebSocketメッセージの解析に失敗:', '[VC\x20Relay]\x20メッセージ処理エラー:', 'Using\x20Proximity\x20Voice\x20Chat\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20', '/connect\x20', 'roomId', '近接vcを無効にしました', '40WUHcOY', 'https://', 'ready', 'sendMessage']; _0x21be = function () { return _0xf07408; }; return _0x21be(); } const { Server, ServerEvent } = require(_0x3272a8(0x16a)), WebSocket = require('ws'), fetch = require('node-fetch'), wanakana = require(_0x3272a8(0xf4)), fs = require('fs'), JSON5 = require(_0x3272a8(0x149)), getPort = require(_0x3272a8(0xfa)), { Client } = require('ssh2'), net = require('net'), configPath = './config.json', config = JSON5[_0x3272a8(0x11c)](fs[_0x3272a8(0x166)](configPath, _0x3272a8(0x161))); let { app_id = '', secret_key = '', username = '', sub_domain = '', sub_domain2 = '', ssh_password = '', port = 0x4abc, web_port = 0x1f40, proximity = !![], spectator = !![], specListen = !![], specDim = ![], password = ![], distance = 0x6, lang = 'en' } = config, roomId = sub_domain, stop_roop = ![], passwords = {}, positions = {}, yRots = {}, dimentions = {}, shouldBroadcast = ![], wss, relayWs, mainWorld, vcSSHClient, mcSSHClient, spectators = {}; function _0x3429(_0x4a3d37, _0x68c62c) { const _0x21bedd = _0x21be(); return _0x3429 = function (_0x342966, _0x46fab1) { _0x342966 = _0x342966 - 0xe4; let _0x3073dd = _0x21bedd[_0x342966]; return _0x3073dd; }, _0x3429(_0x4a3d37, _0x68c62c); } const server_log_info = _0x797fda => console[_0x3272a8(0x17d)](_0x3272a8(0x100) + _0x797fda), server_log_log = _0x30bd21 => console[_0x3272a8(0x17d)](_0x3272a8(0x150) + _0x30bd21), processName = _0x47fb74 => wanakana['toRomaji'](_0x47fb74[_0x3272a8(0x181)](/ /g, '_'))['replace'](/n'/g, 'n'), RELAY_SERVER_DOMAIN = _0x3272a8(0x147); function startSshForwarding(_0x374fe3, _0x321302, _0x1f05c5) { const _0x533570 = _0x3272a8; if (!_0x374fe3 || !username || !ssh_password) return; const _0x2e16d0 = _0x1f05c5 === 'vc', _0x298931 = _0x2e16d0 ? _0x533570(0x180) : '[MC\x20SSH]', _0x443b8d = { 'host': 'tcpexposer.com', 'port': 0x16, 'username': username, 'password': ssh_password }, _0x306b33 = { 'remoteAddr': _0x374fe3, 'remotePort': 0x50, 'localAddr': _0x533570(0x114), 'localPort': _0x321302 }, _0x2b6953 = new Client(); return _0x2b6953['on'](_0x533570(0xf0), () => { const _0x426078 = _0x533570; _0x2b6953['forwardIn'](_0x306b33['remoteAddr'], _0x306b33['remotePort'], _0x4a801f => { const _0x4e595f = _0x3429; if (_0x4a801f) return console['error'](_0x298931 + _0x4e595f(0x16b) + _0x374fe3 + '):', _0x4a801f[_0x4e595f(0x142)]), server_log_info(_0x298931 + '中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)'), connectToRelayServer(_0x1f05c5), _0x2b6953['end'](); console[_0x4e595f(0x17d)](_0x4e595f(0x104)), _0x2e16d0 ? (server_log_info(_0x4e595f(0x173) + _0x374fe3), server_log_info(_0x4e595f(0x109)), server_log_info(_0x4e595f(0x141)), server_log_info('https://proximity-vc-mcbe.pages.dev?roomid=' + _0x374fe3)) : (server_log_info(_0x4e595f(0x13f)), server_log_info('Connect\x20from\x20Minecraft\x20with\x20the\x20following\x20command:'), server_log_info(_0x4e595f(0xeb) + _0x374fe3 + '.tcpexposer.com')), console[_0x4e595f(0x17d)](_0x4e595f(0x12b)); }), _0x2b6953['on'](_0x426078(0x13d), (_0x2d9b2f, _0x5234bf) => { const _0x2c2bda = _0x426078, _0x195bc1 = _0x5234bf(), _0x5782c5 = net[_0x2c2bda(0x16d)]({ 'host': _0x306b33[_0x2c2bda(0x11d)], 'port': _0x306b33[_0x2c2bda(0x129)] }); _0x5782c5['on'](_0x2c2bda(0x185), () => _0x195bc1[_0x2c2bda(0x13b)](_0x5782c5)['pipe'](_0x195bc1)), _0x5782c5['on'](_0x2c2bda(0x135), _0x18cc20 => { const _0x5225a6 = _0x2c2bda; console[_0x5225a6(0x135)]('ローカル接続エラー\x20(' + _0x374fe3 + '):', _0x18cc20['message']), _0x195bc1[_0x5225a6(0xe7)](); }), _0x195bc1['on'](_0x2c2bda(0xe7), () => _0x5782c5[_0x2c2bda(0x165)]()); }); })['on']('error', _0x3f80b9 => { const _0x135a7f = _0x533570; console[_0x135a7f(0x135)](_0x135a7f(0x14a) + _0x374fe3 + '):', _0x3f80b9[_0x135a7f(0x142)]), server_log_info(_0x298931 + _0x135a7f(0x116)), connectToRelayServer(_0x1f05c5); }), _0x2b6953[_0x533570(0x185)](_0x443b8d), _0x2b6953; } async function setupWebSocketServer() { const _0x254ace = _0x3272a8; if (sub_domain === '' || username === '' || ssh_password === '') return; wss = new WebSocket[(_0x254ace(0x169))]({ 'port': web_port }), wss['on'](_0x254ace(0xe5), _0x6ac89a => { const _0x536d0b = _0x254ace; _0x6ac89a['on'](_0x536d0b(0x142), _0x279bb5 => { const _0x59e689 = _0x536d0b; try { const { userName: _0x246495, position: _0x3a1d0f } = JSON[_0x59e689(0x11c)](_0x279bb5); if (_0x246495 && _0x3a1d0f) positions[_0x246495] = _0x3a1d0f; } catch (_0xe7859a) { console[_0x59e689(0x135)](_0x59e689(0xe8), _0xe7859a); } }), _0x6ac89a['on'](_0x536d0b(0x135), _0x5473f7 => console[_0x536d0b(0x135)]('WebSocket\x20error:', _0x5473f7)); }), vcSSHClient = startSshForwarding(sub_domain, web_port, 'vc'); if (sub_domain2) mcSSHClient = startSshForwarding(sub_domain2, port, 'mc'); else console[_0x254ace(0x17d)](_0x254ace(0x104)), server_log_info(_0x254ace(0x13f)), server_log_info(_0x254ace(0xf9)), server_log_info(_0x254ace(0xe6) + port), console[_0x254ace(0x17d)](_0x254ace(0x12b)); process['on']('SIGINT', () => { const _0x4bb7a0 = _0x254ace; console[_0x4bb7a0(0x17d)]('終了シグナル受信。SSH接続を停止します...'); if (vcSSHClient) vcSSHClient[_0x4bb7a0(0x165)](); if (mcSSHClient) mcSSHClient[_0x4bb7a0(0x165)](); process[_0x4bb7a0(0x123)](); }); } function broadcastPositions() { const _0x43273b = _0x3272a8, _0x4e966f = JSON[_0x43273b(0x12e)]({ 'type': _0x43273b(0x16e), 'proximity': proximity, 'positions': positions, 'distance': distance, 'spectator': spectator, 'spectators': spectators, 'specListen': specListen, 'specDim': specDim, 'yRots': yRots, 'dimentions': dimentions, 'password': password, 'passwords': passwords, 'app_id': app_id, 'secret_key': secret_key }); if ((sub_domain === '' || username === '' || ssh_password === '') && relayWs?.[_0x43273b(0xfc)] === WebSocket[_0x43273b(0x139)]) relayWs[_0x43273b(0xf5)](_0x4e966f); else sub_domain && username && ssh_password && wss[_0x43273b(0x120)][_0x43273b(0x15b)](_0x566772 => { const _0x3bda9b = _0x43273b; _0x566772[_0x3bda9b(0xfc)] === WebSocket[_0x3bda9b(0x139)] && _0x566772['send'](_0x4e966f); }); } async function handleWorld(_0x7615a9) { const _0x13bf68 = _0x3272a8; try { const _0xe372fe = Array[_0x13bf68(0x188)](_0x7615a9[_0x13bf68(0x128)][_0x13bf68(0x106)](), _0x114b09 => String(_0x114b09[_0x13bf68(0x119)])); let _0x4ccc04 = {}; if (proximity) { const [_0x412906, _0x471355, _0x16499f] = await Promise[_0x13bf68(0x187)]([_0x7615a9[_0x13bf68(0x164)](_0x13bf68(0x131)), _0x7615a9[_0x13bf68(0x164)](_0x13bf68(0x163)), _0x7615a9['runCommand'](_0x13bf68(0x112))]); _0x4ccc04 = { 'alive': _0x412906['victim'] || [], 'spectators': _0x471355[_0x13bf68(0x132)] || [], 'details': JSON['parse'](_0x16499f[_0x13bf68(0x11b)] || '[]') }; } _0xe372fe[_0x13bf68(0x15b)](_0x4aaa1d => { const _0x2527af = _0x13bf68; let _0x30835a; if (proximity) _0x30835a = _0x4ccc04[_0x2527af(0x10f)][_0x2527af(0x17b)](_0x4aaa1d); const _0x4604f6 = processName(_0x4aaa1d); _0x4ccc04['spectators'][_0x2527af(0x10e)](_0x4aaa1d) ? spectators[_0x4604f6] = !![] : spectators[_0x4604f6] = ![]; if (!proximity) positions[_0x4604f6] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; else { if (!_0x4ccc04['alive'][_0x2527af(0x10e)](_0x4aaa1d)) positions[_0x4604f6] = { 'x': 0x0, 'y': 0x4e20, 'z': 0x0 }; else { if (spectator && _0x4ccc04[_0x2527af(0x179)][_0x2527af(0x10e)](_0x4aaa1d)) { if (specListen === !![]) positions[_0x4604f6] = _0x4ccc04['details'][_0x30835a][_0x2527af(0x156)]; else positions[_0x4604f6] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; if (specDim === !![]) dimentions[_0x4604f6] = _0x4ccc04['details'][_0x30835a]['dimension']; } else _0x4ccc04[_0x2527af(0x11b)][_0x30835a]?.[_0x2527af(0x156)] ? (positions[_0x4604f6] = _0x4ccc04[_0x2527af(0x11b)][_0x30835a][_0x2527af(0x156)], yRots[_0x4604f6] = _0x4ccc04[_0x2527af(0x11b)][_0x30835a][_0x2527af(0x14e)], dimentions[_0x4604f6] = _0x4ccc04[_0x2527af(0x11b)][_0x30835a]['dimension']) : positions[_0x4604f6] = { 'x': 0x0, 'y': 0x7530, 'z': 0x0 }; } } }), shouldBroadcast = !![]; } catch (_0x56e88f) { console['error'](_0x13bf68(0x176), _0x56e88f); } if (!stop_roop) setTimeout(() => handleWorld(_0x7615a9), 0x64); } async function connectToRelayServer(_0x322049) { const _0x5ba7e4 = _0x3272a8, _0x19d945 = _0x322049 === 'mc', _0x566bd8 = _0x19d945 ? _0x5ba7e4(0x17f) : _0x5ba7e4(0x154); try { const _0x449c97 = await fetch(_0x5ba7e4(0xef) + RELAY_SERVER_DOMAIN + _0x5ba7e4(0x15c)), _0x237e24 = await _0x449c97[_0x5ba7e4(0x12a)](), _0x4fdca6 = _0x237e24[_0x5ba7e4(0xec)]; if (!_0x19d945) roomId = _0x4fdca6; console[_0x5ba7e4(0x17d)]('\x0a======================================================='); _0x19d945 ? (server_log_info('Minecraftから以下のコマンドで接続してください:'), server_log_info(_0x5ba7e4(0xf9)), server_log_info('/connect\x20' + RELAY_SERVER_DOMAIN + _0x5ba7e4(0x183) + _0x4fdca6)) : (server_log_info('ROOM\x20ID:\x20' + _0x4fdca6), server_log_info(_0x5ba7e4(0x109)), server_log_info(_0x5ba7e4(0x141)), server_log_info(_0x5ba7e4(0x171) + _0x4fdca6)); console[_0x5ba7e4(0x17d)](_0x5ba7e4(0x12b)); const _0x454079 = new WebSocket(_0x5ba7e4(0x17c) + RELAY_SERVER_DOMAIN + _0x5ba7e4(0x183) + _0x4fdca6 + _0x5ba7e4(0x118)); if (!_0x19d945) relayWs = _0x454079; _0x454079['on'](_0x5ba7e4(0x178), () => console[_0x5ba7e4(0x17d)](_0x566bd8 + '\x20Relay\x20server\x20connected\x20(ID:\x20' + _0x4fdca6 + ')')), _0x454079['on'](_0x5ba7e4(0xe7), () => console[_0x5ba7e4(0x17d)](_0x566bd8 + '\x20Relay\x20server\x20disconnected\x20(ID:\x20' + _0x4fdca6 + ')')), _0x454079['on'](_0x5ba7e4(0x135), _0x27d595 => console[_0x5ba7e4(0x135)](_0x566bd8 + _0x5ba7e4(0x170), _0x27d595)), _0x19d945 ? setupMcRelayListeners(_0x454079) : setupVcRelayListeners(_0x454079); } catch (_0x39f4de) { console[_0x5ba7e4(0x135)](_0x566bd8 + _0x5ba7e4(0x12d), _0x39f4de); } } function setupVcRelayListeners(_0x29ced3) { const _0x433983 = _0x3272a8; _0x29ced3['on'](_0x433983(0x142), async _0x25ce2f => { const _0x118b70 = _0x433983; try { const _0x8f2e4c = JSON['parse'](_0x25ce2f[_0x118b70(0x105)]()); if (mainWorld && _0x8f2e4c[_0x118b70(0x103)] === 'run_command' && typeof _0x8f2e4c[_0x118b70(0x17e)] === _0x118b70(0x12f)) { const _0x38d11e = await mainWorld[_0x118b70(0x164)](_0x8f2e4c[_0x118b70(0x17e)]); _0x29ced3[_0x118b70(0xf5)](JSON[_0x118b70(0x12e)]({ 'type': _0x118b70(0x151), 'payload': _0x38d11e })); } } catch (_0x2e90b7) { console[_0x118b70(0x135)](_0x118b70(0xe9), _0x2e90b7); } }); } function setupMcRelayListeners(_0xd831ee) { const _0x3caaa1 = _0x3272a8; let _0x3edfe1; _0xd831ee['on'](_0x3caaa1(0x142), _0x13ee66 => { const _0x87170a = _0x3caaa1; try { const _0x5948c6 = JSON[_0x87170a(0x11c)](_0x13ee66[_0x87170a(0x105)]()); if (_0x5948c6[_0x87170a(0x157)] === _0x87170a(0x186)) { console['log']('★★★\x20[MC\x20Relay]\x20パートナー接続通知を受信。ローカルブリッジを構築します。\x20★★★'), _0x3edfe1 = new WebSocket(_0x87170a(0x168) + port), _0x3edfe1['on'](_0x87170a(0x178), () => console['log'](_0x87170a(0xf3))), _0x3edfe1['on'](_0x87170a(0x142), _0x354526 => _0xd831ee[_0x87170a(0xfc)] === WebSocket[_0x87170a(0x139)] && _0xd831ee['send'](_0x354526)), _0x3edfe1['on'](_0x87170a(0xe7), () => _0xd831ee[_0x87170a(0xfc)] === WebSocket[_0x87170a(0x139)] && _0xd831ee[_0x87170a(0xe7)]()), _0x3edfe1['on'](_0x87170a(0x135), _0x1f4fa6 => console[_0x87170a(0x135)]('[MC\x20Local\x20WS\x20Error]', _0x1f4fa6[_0x87170a(0x142)])); return; } } catch (_0x4b4379) { } _0x3edfe1?.['readyState'] === WebSocket[_0x87170a(0x139)] && _0x3edfe1[_0x87170a(0xf5)](_0x13ee66); }), _0xd831ee['on'](_0x3caaa1(0xe7), () => _0x3edfe1?.['close']()); } async function main() { const _0x770749 = _0x3272a8; port = await getPort({ 'port': port }), web_port = await getPort({ 'port': web_port }), server_log_info(_0x770749(0x10a) + port); const _0x4dbda0 = new Server({ 'port': port, 'disableEncryption': !![], 'timezone': _0x770749(0x16f) }), _0x30d112 = (_0x4e8c8c, _0x4103f5) => { const _0x4d8699 = _0x770749; try { let _0x51a464 = fs['readFileSync'](configPath, _0x4d8699(0x161)); const _0x15b67c = new RegExp('(\x22' + _0x4e8c8c + _0x4d8699(0x153)), _0x5bd773 = typeof _0x4103f5 === 'string' ? '\x22' + _0x4103f5 + '\x22' : _0x4103f5, _0x592392 = _0x51a464[_0x4d8699(0x181)](_0x15b67c, '$1' + _0x5bd773); _0x592392 !== _0x51a464 && fs[_0x4d8699(0x115)](configPath, _0x592392, _0x4d8699(0x161)); } catch (_0x56bbbe) { console[_0x4d8699(0x135)](_0x4d8699(0x124), _0x56bbbe); } }, _0x20da35 = (_0x858df5, _0x11ea15, _0x49862f) => async (_0x5706aa, _0x20ed17, _0x2fa971) => { const _0x549149 = _0x770749; if (_0x20ed17[_0x549149(0x119)] !== _0x5706aa['localPlayer'][_0x549149(0x119)]) return; if (_0x2fa971[0x0] !== 'true' && _0x2fa971[0x0] !== _0x549149(0x10b)) return; const _0x2a5c09 = _0x2fa971[0x0] === _0x549149(0x138); if (_0x858df5 === _0x549149(0x117)) password = _0x2a5c09; else { if (_0x858df5 === 'proximity') proximity = _0x2a5c09; else { if (_0x858df5 === 'spectator') spectator = _0x2a5c09; else { if (_0x858df5 === _0x549149(0x10d)) specListen = _0x2a5c09; else { if (_0x858df5 === 'specDim') specDim = _0x2a5c09; } } } } _0x30d112(_0x858df5, _0x2a5c09), Object[_0x549149(0x15f)](global, { [_0x858df5]: _0x2a5c09 }); const _0x5490d2 = lang === 'ja' ? _0x2a5c09 ? _0x11ea15[_0x549149(0x130)] : _0x11ea15[_0x549149(0x174)] : _0x2a5c09 ? _0x49862f['enabled'] : _0x49862f['disabled']; await _0x5706aa[_0x549149(0xf1)](_0x5490d2); }, _0x54319a = { '!dis': async (_0x3daa1d, _0x3035a0, _0x35d3e5) => { const _0xdf333b = _0x770749; try { if (_0x3035a0[_0xdf333b(0x119)] !== _0x3daa1d[_0xdf333b(0x111)][_0xdf333b(0x119)]) return; const _0x77eb3c = Number(_0x35d3e5[0x0]); if (!isNaN(_0x77eb3c)) { distance = _0x77eb3c, _0x30d112(_0xdf333b(0x160), _0x77eb3c); const _0xa091e = lang === 'ja' ? _0xdf333b(0xff) + distance + _0xdf333b(0x102) : _0xdf333b(0x12c) + distance; await _0x3daa1d[_0xdf333b(0xf1)](_0xa091e); } } catch (_0x37b981) { } }, '!name': async (_0x3eaafb, _0x4813e9) => { const _0x2e72f1 = _0x770749; try { const _0x1d0927 = processName(_0x4813e9[_0x2e72f1(0x119)]), _0x1a761b = _0x2e72f1(0x145) + roomId + _0x2e72f1(0xf2) + _0x1d0927 + 'です', _0x5e156d = _0x2e72f1(0x11e) + roomId + _0x2e72f1(0x126) + _0x1d0927; await _0x4813e9['sendMessage'](lang === 'ja' ? _0x1a761b : _0x5e156d); if (password) { !passwords[_0x1d0927] && (passwords[_0x1d0927] = Math['floor'](0x3e8 + Math[_0x2e72f1(0x146)]() * 0x2328)[_0x2e72f1(0x105)]()); const _0x4074b9 = lang === 'ja' ? _0x2e72f1(0x11a) + passwords[_0x1d0927] + 'です' : _0x2e72f1(0x172) + passwords[_0x1d0927]; await _0x4813e9[_0x2e72f1(0xf1)](_0x4074b9); } } catch (_0x5043d5) { } }, '!password': _0x20da35(_0x770749(0x117), { 'enabled': _0x770749(0x133), 'disabled': _0x770749(0x144) }, { 'enabled': 'Password\x20enabled', 'disabled': 'Password\x20disabled' }), '!pvc': _0x20da35(_0x770749(0x159), { 'enabled': '近接vcを有効にしました', 'disabled': _0x770749(0xed) }, { 'enabled': _0x770749(0x15e), 'disabled': 'Proximity\x20VC\x20disabled' }), '!spectator': _0x20da35(_0x770749(0x113), { 'enabled': _0x770749(0x15a), 'disabled': _0x770749(0x162) }, { 'enabled': _0x770749(0x16c), 'disabled': 'Spectator\x20set\x20to\x20common\x20VC' }), '!specListen': _0x20da35(_0x770749(0x10d), { 'enable': _0x770749(0xe4), 'disable': _0x770749(0x13a) }, { 'enable': _0x770749(0xfb), 'disable': _0x770749(0x182) }), '!specDim': _0x20da35('specDim', { 'enable': _0x770749(0x121), 'disable': _0x770749(0x15d) }, { 'enable': _0x770749(0x107), 'disable': _0x770749(0x136) }), '!lang': async (_0x47c2f4, _0x46f3a0, _0x455c71) => { const _0x418d27 = _0x770749; try { if (_0x46f3a0['name'] !== _0x47c2f4[_0x418d27(0x111)]['name']) return; const _0x1cfeb2 = _0x455c71[0x0] === 'ja' ? 'ja' : 'en'; lang = _0x1cfeb2, _0x30d112(_0x418d27(0x14c), _0x1cfeb2); const _0x25b114 = _0x1cfeb2 === 'ja' ? _0x418d27(0x17a) : _0x418d27(0x134); await _0x47c2f4[_0x418d27(0xf1)](_0x25b114); } catch (_0x56cf19) { } }, '!help': async (_0xa5371e, _0x8ca49) => { const _0x11ef2d = _0x770749; try { await _0x8ca49['sendMessage'](_0x11ef2d(0x143)); if (lang == 'ja') { await _0x8ca49['sendMessage']('コマンド一覧：\x0a\x20\u00a0!help\x20-\x20ヘルプを表示します\x0a\x20\u00a0!name\x20-\x20VCで使う名前を確認できます'); const _0x29b889 = _0xa5371e['localPlayer'][_0x11ef2d(0x119)]; _0x8ca49[_0x11ef2d(0x119)] == _0x29b889 && await _0x8ca49[_0x11ef2d(0xf1)]('ホスト専用コマンド：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20chenge\x20language\x0a\x20\u00a0!dis\x20-\x20!dis\x20<数値>\x20で声の届く距離を変更できます\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20で近接vcを有効/無効にできます\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20でスペクテイターとVCを分けます\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20でスペクテイターが他モードプレイヤーの会話を聞けるようになります\x20\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20でスペクテイター同士の会話をディメンションごとに分けます\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20でパスワードを有効/無効にできます'); } else { await _0x8ca49['sendMessage'](_0x11ef2d(0x177)); const _0x4db8d7 = _0xa5371e['localPlayer']['name']; _0x8ca49[_0x11ef2d(0x119)] == _0x4db8d7 && await _0x8ca49['sendMessage']('Host-only\x20command：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20言語を変更できます\x0a\x20\u00a0!dis\x20-\x20!dis\x20<Number>\x20set\x20max\x20distance\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20enable/disable\x20proximity\x20voice\x20chat\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20separate\x20spectator\x20and\x20VC\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20Spectator`s\x20VC\x20separated\x20by\x20dimension\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20enable/disable\x20password'); } await _0x8ca49[_0x11ef2d(0xf1)](_0x11ef2d(0x143)); } catch (_0x4b6166) { } } }; _0x4dbda0['on'](ServerEvent[_0x770749(0x14f)], async ({ sender: _0x44fc89, message: _0x5f4eed, world: _0x5e046b }) => { const _0x1ed646 = _0x770749, [_0x440fa9, ..._0x12fe92] = _0x5f4eed[_0x1ed646(0x184)]('\x20'); if (_0x54319a[_0x440fa9]) await _0x54319a[_0x440fa9](_0x5e046b, _0x44fc89, _0x12fe92); }), _0x4dbda0['on'](ServerEvent[_0x770749(0x125)], () => setupWebSocketServer()), _0x4dbda0['on'](ServerEvent[_0x770749(0x127)], async ({ world: _0x542f06 }) => { const _0x3b886f = _0x770749; mainWorld = _0x542f06, stop_roop = ![], server_log_info(_0x3b886f(0x14d) + _0x542f06[_0x3b886f(0x119)]); if (lang == 'ja') { let _0x403691 = ''; proximity ? _0x403691 = '有効' : _0x403691 = '無効', _0x542f06[_0x3b886f(0xf1)](_0x3b886f(0xf6) + _0x403691 + _0x3b886f(0x158) + distance + _0x3b886f(0x155)); } else { let _0x1cdebc = ''; proximity ? _0x1cdebc = _0x3b886f(0x130) : _0x1cdebc = _0x3b886f(0x174), _0x542f06['sendMessage'](_0x3b886f(0x10c) + _0x1cdebc + _0x3b886f(0xf8) + distance + _0x3b886f(0x13e)); } await handleWorld(_0x542f06); }), _0x4dbda0['on'](ServerEvent[_0x770749(0x140)], ({ world: _0x23c835 }) => { const _0x8d4c48 = _0x770749; mainWorld = null, stop_roop = !![], server_log_info(_0x8d4c48(0x175) + _0x23c835[_0x8d4c48(0x119)]); }), _0x4dbda0['on'](ServerEvent[_0x770749(0xfe)], async ({ player: _0x3e61d2, world: _0x57bc39 }) => { const _0x1ee373 = _0x770749; server_log_info(_0x1ee373(0xf7) + _0x3e61d2['name']); const _0x584d0e = setInterval(async () => { const _0x21f7aa = _0x1ee373; try { const _0x58c959 = processName(_0x3e61d2['name']), _0x462011 = _0x21f7aa(0x152) + roomId + _0x21f7aa(0xf2) + _0x58c959 + 'です', _0xe59f99 = _0x21f7aa(0xea) + roomId + _0x21f7aa(0x126) + _0x58c959; await _0x3e61d2[_0x21f7aa(0xf1)](lang === 'ja' ? _0x462011 : _0xe59f99); if (password) { !passwords[_0x58c959] && (passwords[_0x58c959] = Math[_0x21f7aa(0x167)](0x3e8 + Math[_0x21f7aa(0x146)]() * 0x2328)[_0x21f7aa(0x105)]()); const _0x17302d = lang === 'ja' ? _0x21f7aa(0x11a) + passwords[_0x58c959] + 'です' : _0x21f7aa(0x172) + passwords[_0x58c959]; await _0x3e61d2[_0x21f7aa(0xf1)](_0x17302d); } clearInterval(_0x584d0e); } catch (_0x1863b2) { } }, 0x1f4); }), _0x4dbda0['on'](ServerEvent[_0x770749(0x148)], ({ player: _0x50452b }) => { const _0x338f20 = _0x770749; server_log_info('退出:\x20' + _0x50452b[_0x338f20(0x119)]), delete positions[processName(_0x50452b[_0x338f20(0x119)])]; }), setInterval(() => { shouldBroadcast && (broadcastPositions(), shouldBroadcast = ![]); }, 0x32), (sub_domain === '' || username === '' || ssh_password === '') && (server_log_info(_0x770749(0x116)), connectToRelayServer('vc'), connectToRelayServer('mc')); } main();